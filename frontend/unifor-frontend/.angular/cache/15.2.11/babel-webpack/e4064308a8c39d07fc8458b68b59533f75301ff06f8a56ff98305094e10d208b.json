{"ast":null,"code":"import _asyncToGenerator from \"C:/DevTools/Projects/UNIFOR/Desafio-UNIFOR-Hexagonal-Quarkus-Angular/frontend/unifor-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { KeycloakAuthGuard } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nexport class AppAuthGuard extends KeycloakAuthGuard {\n  constructor(router, keycloakAngular) {\n    super(router, keycloakAngular);\n    this.router = router;\n    this.keycloakAngular = keycloakAngular;\n  }\n  isAccessAllowed(route, _state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // garante que está autenticado\n      if (!_this.authenticated) {\n        yield _this.keycloakAngular.login();\n        return false;\n      }\n      const requiredRoles = route.data['roles'];\n      if (!requiredRoles || requiredRoles.length === 0) return true;\n      // verifica se o usuário possui pelo menos 1 das roles exigidas\n      return requiredRoles.some(role => _this.roles.includes(role));\n    })();\n  }\n  static {\n    this.ɵfac = function AppAuthGuard_Factory(t) {\n      return new (t || AppAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppAuthGuard,\n      factory: AppAuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";AAEA,SAASA,iBAAiB,QAAyB,kBAAkB;;;;AAGrE,OAAM,MAAOC,YAAa,SAAQD,iBAAiB;EACjDE,YAA+BC,MAAc,EAAqBC,eAAgC;IAChG,KAAK,CAACD,MAAM,EAAEC,eAAe,CAAC;IADD,WAAM,GAAND,MAAM;IAA6B,oBAAe,GAAfC,eAAe;EAEjF;EAEMC,eAAe,CAACC,KAA6B,EAAEC,MAA2B;IAAA;IAAA;MAC9E;MACA,IAAI,CAAC,KAAI,CAACC,aAAa,EAAE;QACvB,MAAM,KAAI,CAACJ,eAAe,CAACK,KAAK,EAAE;QAClC,OAAO,KAAK;;MAEd,MAAMC,aAAa,GAAGJ,KAAK,CAACK,IAAI,CAAC,OAAO,CAAyB;MACjE,IAAI,CAACD,aAAa,IAAIA,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;MAE7D;MACA,OAAOF,aAAa,CAACG,IAAI,CAAEC,IAAI,IAAK,KAAI,CAACC,KAAK,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC;IAAC;EACjE;;;uBAhBWb,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAgB,SAAZhB,YAAY;MAAAiB,YADC;IAAM;EAAA","names":["KeycloakAuthGuard","AppAuthGuard","constructor","router","keycloakAngular","isAccessAllowed","route","_state","authenticated","login","requiredRoles","data","length","some","role","roles","includes","factory","providedIn"],"sourceRoot":"","sources":["C:\\DevTools\\Projects\\UNIFOR\\Desafio-UNIFOR-Hexagonal-Quarkus-Angular\\frontend\\unifor-frontend\\src\\app\\core\\auth\\app-auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { KeycloakAuthGuard, KeycloakService } from 'keycloak-angular';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AppAuthGuard extends KeycloakAuthGuard {\r\n  constructor(protected override router: Router, protected override keycloakAngular: KeycloakService) {\r\n    super(router, keycloakAngular);\r\n  }\r\n\r\n  async isAccessAllowed(route: ActivatedRouteSnapshot, _state: RouterStateSnapshot) {\r\n    // garante que está autenticado\r\n    if (!this.authenticated) {\r\n      await this.keycloakAngular.login();\r\n      return false;\r\n    }\r\n    const requiredRoles = route.data['roles'] as string[] | undefined;\r\n    if (!requiredRoles || requiredRoles.length === 0) return true;\r\n\r\n    // verifica se o usuário possui pelo menos 1 das roles exigidas\r\n    return requiredRoles.some((role) => this.roles.includes(role));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}