{"ast":null,"code":"import _asyncToGenerator from \"C:/DevTools/Projects/UNIFOR/Desafio-UNIFOR-Hexagonal-Quarkus-Angular/frontend/unifor-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(keycloakService, router) {\n    this.keycloakService = keycloakService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // âœ… Verifica se o usuÃ¡rio estÃ¡ autenticado\n      const isLoggedIn = yield _this.keycloakService.isLoggedIn();\n      if (!isLoggedIn) {\n        yield _this.keycloakService.login({\n          redirectUri: window.location.origin + state.url\n        });\n        return false;\n      }\n      // âœ… Recupera roles do usuÃ¡rio logado\n      const requiredRoles = route.data['roles'];\n      if (requiredRoles && requiredRoles.length > 0) {\n        const hasRole = requiredRoles.some(role => _this.keycloakService.isUserInRole(role));\n        if (!hasRole) {\n          console.warn('ðŸš« Acesso negado â€” usuÃ¡rio sem permissÃ£o');\n          _this.router.navigate(['/acesso-negado']);\n          return false;\n        }\n      }\n      return true;\n    })();\n  }\n  static {\n    this.Éµfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ÉµÉµinject(i1.KeycloakService), i0.ÉµÉµinject(i2.Router));\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.Éµfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;;AAcA,OAAM,MAAOA,SAAS;EACpBC,YACUC,eAAgC,EAChCC,MAAc;IADd,oBAAe,GAAfD,eAAe;IACf,WAAM,GAANC,MAAM;EACb;EAEGC,WAAW,CACfC,KAA6B,EAC7BC,KAA0B;IAAA;IAAA;MAE1B;MACA,MAAMC,UAAU,SAAS,KAAI,CAACL,eAAe,CAACK,UAAU,EAAE;MAE1D,IAAI,CAACA,UAAU,EAAE;QACf,MAAM,KAAI,CAACL,eAAe,CAACM,KAAK,CAAC;UAC/BC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAGN,KAAK,CAACO;SAC7C,CAAC;QACF,OAAO,KAAK;;MAGd;MACA,MAAMC,aAAa,GAAGT,KAAK,CAACU,IAAI,CAAC,OAAO,CAAa;MACrD,IAAID,aAAa,IAAIA,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;QAC7C,MAAMC,OAAO,GAAGH,aAAa,CAACI,IAAI,CAAEC,IAAI,IACtC,KAAI,CAACjB,eAAe,CAACkB,YAAY,CAACD,IAAI,CAAC,CACxC;QAED,IAAI,CAACF,OAAO,EAAE;UACZI,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;UACxD,KAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;UACxC,OAAO,KAAK;;;MAIhB,OAAO,IAAI;IAAC;EACd;;;uBAnCWvB,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAwB,SAATxB,SAAS;MAAAyB,YAFR;IAAM;EAAA","names":["AuthGuard","constructor","keycloakService","router","canActivate","route","state","isLoggedIn","login","redirectUri","window","location","origin","url","requiredRoles","data","length","hasRole","some","role","isUserInRole","console","warn","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\DevTools\\Projects\\UNIFOR\\Desafio-UNIFOR-Hexagonal-Quarkus-Angular\\frontend\\unifor-frontend\\src\\app\\core\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { KeycloakService } from 'keycloak-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private keycloakService: KeycloakService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  async canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Promise<boolean | UrlTree> {\r\n    // âœ… Verifica se o usuÃ¡rio estÃ¡ autenticado\r\n    const isLoggedIn = await this.keycloakService.isLoggedIn();\r\n\r\n    if (!isLoggedIn) {\r\n      await this.keycloakService.login({\r\n        redirectUri: window.location.origin + state.url,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    // âœ… Recupera roles do usuÃ¡rio logado\r\n    const requiredRoles = route.data['roles'] as string[];\r\n    if (requiredRoles && requiredRoles.length > 0) {\r\n      const hasRole = requiredRoles.some((role) =>\r\n        this.keycloakService.isUserInRole(role)\r\n      );\r\n\r\n      if (!hasRole) {\r\n        console.warn('ðŸš« Acesso negado â€” usuÃ¡rio sem permissÃ£o');\r\n        this.router.navigate(['/acesso-negado']);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}