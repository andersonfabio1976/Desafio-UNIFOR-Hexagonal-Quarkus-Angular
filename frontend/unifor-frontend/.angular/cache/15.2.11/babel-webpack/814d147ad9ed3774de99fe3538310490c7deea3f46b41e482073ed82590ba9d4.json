{"ast":null,"code":"import { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\n/**\r\n * ✅ Intercepta todas as requisições HTTP\r\n * e adiciona automaticamente o token JWT do Keycloak\r\n */\nexport class TokenInterceptor {\n  constructor(keycloakService) {\n    this.keycloakService = keycloakService;\n  }\n  intercept(req, next) {\n    return from(this.keycloakService.getToken()).pipe(switchMap(token => {\n      const clonedReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(clonedReq);\n    }));\n  }\n  static {\n    this.ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)(i0.ɵɵinject(i1.KeycloakService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AAQA,SAAqBA,IAAI,QAAQ,MAAM;AACvC,SAASC,SAAS,QAAQ,gBAAgB;;;AAE1C;;;;AAKA,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;EAAoB;EAEvDC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,OAAOP,IAAI,CAAC,IAAI,CAACI,eAAe,CAACI,QAAQ,EAAE,CAAC,CAACC,IAAI,CAC/CR,SAAS,CAAES,KAAK,IAAI;MAClB,MAAMC,SAAS,GAAGL,GAAG,CAACM,KAAK,CAAC;QAC1BC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;MACF,OAAOH,IAAI,CAACQ,MAAM,CAACJ,SAAS,CAAC;IAC/B,CAAC,CAAC,CACH;EACH;;;uBAjBWT,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAc,SAAhBd,gBAAgB;IAAA;EAAA","names":["from","switchMap","TokenInterceptor","constructor","keycloakService","intercept","req","next","getToken","pipe","token","clonedReq","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\DevTools\\Projects\\UNIFOR\\Desafio-UNIFOR-Hexagonal-Quarkus-Angular\\frontend\\unifor-frontend\\src\\app\\core\\auth\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { KeycloakService } from 'keycloak-angular';\r\nimport { Observable, from } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n/**\r\n * ✅ Intercepta todas as requisições HTTP\r\n * e adiciona automaticamente o token JWT do Keycloak\r\n */\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(private keycloakService: KeycloakService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return from(this.keycloakService.getToken()).pipe(\r\n      switchMap((token) => {\r\n        const clonedReq = req.clone({\r\n          setHeaders: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        return next.handle(clonedReq);\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}