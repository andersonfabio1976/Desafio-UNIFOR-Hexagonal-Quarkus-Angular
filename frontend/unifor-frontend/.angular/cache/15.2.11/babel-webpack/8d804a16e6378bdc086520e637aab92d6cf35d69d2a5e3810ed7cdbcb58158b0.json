{"ast":null,"code":"import _asyncToGenerator from \"C:/DevTools/Projects/UNIFOR/Desafio-UNIFOR-Hexagonal-Quarkus-Angular/frontend/unifor-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(keycloak, router) {\n    this.keycloak = keycloak;\n    this.router = router;\n  }\n  canActivate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const isLoggedIn = yield _this.keycloak.isLoggedIn();\n      if (!isLoggedIn) {\n        yield _this.keycloak.login();\n        return false;\n      }\n      const userRoles = _this.keycloak.getUserRoles();\n      const hasAccess = userRoles.includes('ROLE_ADMIN') || userRoles.includes('ROLE_COORDENADOR');\n      if (!hasAccess) {\n        console.warn('Acesso negado: usuário sem permissão de administrador.');\n        _this.router.navigate(['/']); // redireciona para home\n        return false;\n      }\n      return true;\n    })();\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.KeycloakService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,QAAyB,EAAUC,MAAc;IAAjD,aAAQ,GAARD,QAAQ;IAA2B,WAAM,GAANC,MAAM;EAAW;EAElEC,WAAW;IAAA;IAAA;MACf,MAAMC,UAAU,SAAS,KAAI,CAACH,QAAQ,CAACG,UAAU,EAAE;MACnD,IAAI,CAACA,UAAU,EAAE;QACf,MAAM,KAAI,CAACH,QAAQ,CAACI,KAAK,EAAE;QAC3B,OAAO,KAAK;;MAGd,MAAMC,SAAS,GAAG,KAAI,CAACL,QAAQ,CAACM,YAAY,EAAE;MAC9C,MAAMC,SAAS,GAAGF,SAAS,CAACG,QAAQ,CAAC,YAAY,CAAC,IAAIH,SAAS,CAACG,QAAQ,CAAC,kBAAkB,CAAC;MAE5F,IAAI,CAACD,SAAS,EAAE;QACdE,OAAO,CAACC,IAAI,CAAC,wDAAwD,CAAC;QACtE,KAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,KAAK;;MAGd,OAAO,IAAI;IAAC;EACd;;;uBApBWb,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAc,SAATd,SAAS;MAAAe,YAFR;IAAM;EAAA","names":["AuthGuard","constructor","keycloak","router","canActivate","isLoggedIn","login","userRoles","getUserRoles","hasAccess","includes","console","warn","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\DevTools\\Projects\\UNIFOR\\Desafio-UNIFOR-Hexagonal-Quarkus-Angular\\frontend\\unifor-frontend\\src\\app\\core\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { KeycloakService } from 'keycloak-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private keycloak: KeycloakService, private router: Router) {}\r\n\r\n  async canActivate(): Promise<boolean> {\r\n    const isLoggedIn = await this.keycloak.isLoggedIn();\r\n    if (!isLoggedIn) {\r\n      await this.keycloak.login();\r\n      return false;\r\n    }\r\n\r\n    const userRoles = this.keycloak.getUserRoles();\r\n    const hasAccess = userRoles.includes('ROLE_ADMIN') || userRoles.includes('ROLE_COORDENADOR');\r\n\r\n    if (!hasAccess) {\r\n      console.warn('Acesso negado: usuário sem permissão de administrador.');\r\n      this.router.navigate(['/']); // redireciona para home\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}